package vn.vnpt.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ThongTinChungHopDongAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertThongTinChungHopDongAllPropertiesEquals(ThongTinChungHopDong expected, ThongTinChungHopDong actual) {
        assertThongTinChungHopDongAutoGeneratedPropertiesEquals(expected, actual);
        assertThongTinChungHopDongAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertThongTinChungHopDongAllUpdatablePropertiesEquals(ThongTinChungHopDong expected, ThongTinChungHopDong actual) {
        assertThongTinChungHopDongUpdatableFieldsEquals(expected, actual);
        assertThongTinChungHopDongUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertThongTinChungHopDongAutoGeneratedPropertiesEquals(ThongTinChungHopDong expected, ThongTinChungHopDong actual) {
        assertThat(expected)
            .as("Verify ThongTinChungHopDong auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertThongTinChungHopDongUpdatableFieldsEquals(ThongTinChungHopDong expected, ThongTinChungHopDong actual) {
        assertThat(expected)
            .as("Verify ThongTinChungHopDong relevant properties")
            .satisfies(e -> assertThat(e.getNgayLapHd()).as("check ngayLapHd").isEqualTo(actual.getNgayLapHd()))
            .satisfies(e -> assertThat(e.getNguoiLapHd()).as("check nguoiLapHd").isEqualTo(actual.getNguoiLapHd()))
            .satisfies(e -> assertThat(e.getThongTinVanBan()).as("check thongTinVanBan").isEqualTo(actual.getThongTinVanBan()))
            .satisfies(e -> assertThat(e.getTrangThai()).as("check trangThai").isEqualTo(actual.getTrangThai()))
            .satisfies(e -> assertThat(e.getIdLoaiHd()).as("check idLoaiHd").isEqualTo(actual.getIdLoaiHd()))
            .satisfies(e -> assertThat(e.getDieuKhoanHd()).as("check dieuKhoanHd").isEqualTo(actual.getDieuKhoanHd()))
            .satisfies(e -> assertThat(e.getIdDonVi()).as("check idDonVi").isEqualTo(actual.getIdDonVi()))
            .satisfies(e -> assertThat(e.getNgayThaoTac()).as("check ngayThaoTac").isEqualTo(actual.getNgayThaoTac()))
            .satisfies(e -> assertThat(e.getNguoiThaoTac()).as("check nguoiThaoTac").isEqualTo(actual.getNguoiThaoTac()))
            .satisfies(e -> assertThat(e.getIdHdGoc()).as("check idHdGoc").isEqualTo(actual.getIdHdGoc()))
            .satisfies(e -> assertThat(e.getMaHopDong()).as("check maHopDong").isEqualTo(actual.getMaHopDong()))
            .satisfies(e -> assertThat(e.getSrcHopDong()).as("check srcHopDong").isEqualTo(actual.getSrcHopDong()))
            .satisfies(e -> assertThat(e.getNgayHen()).as("check ngayHen").isEqualTo(actual.getNgayHen()))
            .satisfies(e -> assertThat(e.getSoCongChung()).as("check soCongChung").isEqualTo(actual.getSoCongChung()))
            .satisfies(e -> assertThat(e.getCongChungVien()).as("check congChungVien").isEqualTo(actual.getCongChungVien()))
            .satisfies(e -> assertThat(e.getNgayKyHd()).as("check ngayKyHd").isEqualTo(actual.getNgayKyHd()))
            .satisfies(e -> assertThat(e.getNguoiRutTrich()).as("check nguoiRutTrich").isEqualTo(actual.getNguoiRutTrich()))
            .satisfies(e -> assertThat(e.getSoTienRutTrich()).as("check soTienRutTrich").isEqualTo(actual.getSoTienRutTrich()))
            .satisfies(e -> assertThat(e.getNgayRutTrich()).as("check ngayRutTrich").isEqualTo(actual.getNgayRutTrich()))
            .satisfies(e -> assertThat(e.getHdThuCong()).as("check hdThuCong").isEqualTo(actual.getHdThuCong()))
            .satisfies(e -> assertThat(e.getTrangThaiRutTrich()).as("check trangThaiRutTrich").isEqualTo(actual.getTrangThaiRutTrich()))
            .satisfies(e -> assertThat(e.getChuKyNgoaiTruSo()).as("check chuKyNgoaiTruSo").isEqualTo(actual.getChuKyNgoaiTruSo()))
            .satisfies(e -> assertThat(e.getStrSearch()).as("check strSearch").isEqualTo(actual.getStrSearch()))
            .satisfies(e -> assertThat(e.getIdMaster()).as("check idMaster").isEqualTo(actual.getIdMaster()))
            .satisfies(e -> assertThat(e.getIdHdSdHb()).as("check idHdSdHb").isEqualTo(actual.getIdHdSdHb()))
            .satisfies(e -> assertThat(e.getSrcDmMaster()).as("check srcDmMaster").isEqualTo(actual.getSrcDmMaster()))
            .satisfies(e -> assertThat(e.getRepRefUnique()).as("check repRefUnique").isEqualTo(actual.getRepRefUnique()))
            .satisfies(e -> assertThat(e.getNgayText()).as("check ngayText").isEqualTo(actual.getNgayText()))
            .satisfies(e -> assertThat(e.getThongTinChung()).as("check thongTinChung").isEqualTo(actual.getThongTinChung()))
            .satisfies(e -> assertThat(e.getThongTinChungClob()).as("check thongTinChungClob").isEqualTo(actual.getThongTinChungClob()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertThongTinChungHopDongUpdatableRelationshipsEquals(ThongTinChungHopDong expected, ThongTinChungHopDong actual) {}
}
