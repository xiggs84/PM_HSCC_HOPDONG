package vn.vnpt.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SoCongChungAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSoCongChungAllPropertiesEquals(SoCongChung expected, SoCongChung actual) {
        assertSoCongChungAutoGeneratedPropertiesEquals(expected, actual);
        assertSoCongChungAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSoCongChungAllUpdatablePropertiesEquals(SoCongChung expected, SoCongChung actual) {
        assertSoCongChungUpdatableFieldsEquals(expected, actual);
        assertSoCongChungUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSoCongChungAutoGeneratedPropertiesEquals(SoCongChung expected, SoCongChung actual) {
        assertThat(expected)
            .as("Verify SoCongChung auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSoCongChungUpdatableFieldsEquals(SoCongChung expected, SoCongChung actual) {
        assertThat(expected)
            .as("Verify SoCongChung relevant properties")
            .satisfies(e -> assertThat(e.getNgayThaoTac()).as("check ngayThaoTac").isEqualTo(actual.getNgayThaoTac()))
            .satisfies(e -> assertThat(e.getIdSo()).as("check idSo").isEqualTo(actual.getIdSo()))
            .satisfies(e -> assertThat(e.getIdDonVi()).as("check idDonVi").isEqualTo(actual.getIdDonVi()))
            .satisfies(e -> assertThat(e.getTenSo()).as("check tenSo").isEqualTo(actual.getTenSo()))
            .satisfies(e -> assertThat(e.getGiaTri()).as("check giaTri").isEqualTo(actual.getGiaTri()))
            .satisfies(e -> assertThat(e.getNguoiThaoTac()).as("check nguoiThaoTac").isEqualTo(actual.getNguoiThaoTac()))
            .satisfies(e -> assertThat(e.getTrangThai()).as("check trangThai").isEqualTo(actual.getTrangThai()))
            .satisfies(e -> assertThat(e.getIdLoaiSo()).as("check idLoaiSo").isEqualTo(actual.getIdLoaiSo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSoCongChungUpdatableRelationshipsEquals(SoCongChung expected, SoCongChung actual) {}
}
